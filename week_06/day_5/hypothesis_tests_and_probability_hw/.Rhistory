rules <- apriori(apriori_format, parameter = list(supp = 0.8, conf = 0.8))
library(tidyverse)
library(infer)
msleep
glimpse(msleep)
summary(msleep)
# calculate sample statistic, i.e. mean of total sleep for all animals in sample
sleep_observed_stat <- msleep %>%
summarise(mean_sleep_total = mean(sleep_total))
null_distribution_sleep <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
# create histogram of null_distribution
null_distribution_sleep %>%
visualise() +
shade_p_value(obs_stat = sleep_observed_stat, direction = "both")
p_value <- null_distribution_sleep %>%
get_p_value(obs_stat = sleep_observed_stat, direction = "both")
# filter sample data for only omnivore and herbivore animals
msleep_filtered <- msleep %>%
filter(vore %in% c("omni", "herbi"))
# calculate sample statistic, i.e. mean of total sleep for all animals in sample
vore_observed_stat <- msleep_filtered %>%
specify(response = sleep_total, explanatory = vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
vore_observed_stat
null_distribution_vore <- msleep_filtered %>%
specify(response = sleep_total, explanatory = vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
# create histogram of null_distribution
null_distribution_vore %>%
visualise() +
shade_p_value(obs_stat = vore_observed_stat, direction = "right")
p_value <- null_distribution_vore %>%
get_p_value(obs_stat = vore_observed_stat, direction = "right")
p_value
# create column specifying if animal is domesticated, change NA to FALSE
msleep_dom <- msleep %>%
mutate(is_domesticated = conservation == "domesticated",
is_domesticated = coalesce(is_domesticated, FALSE),
.after = conservation)
# calculate sample statistic, i.e. proportion of domesticated animals
dom_observed_stat <- msleep_dom %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "prop")
dom_observed_stat
null_distribution_dom <- msleep_dom %>%
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
# create histogram of null_distribution
null_distribution_dom %>%
visualise() +
shade_p_value(obs_stat = dom_observed_stat, direction = "right")
p_value <- null_distribution_dom %>%
get_p_value(obs_stat = dom_observed_stat, direction = "right")
p_value
library(janitor)
transactions <- read_csv("data/online_retail_subset.csv") %>%
clean_names()
# filter data for stock code and distinct invoice_no
num_transactions_A <- transactions %>%
filter(stock_code == 22469) %>%
distinct(invoice_no, stock_code) %>%
summarise(prob_A = n())
# calculate number of total distinct invoices
total_transactions <- transactions %>%
distinct(invoice_no) %>%
summarise(n())
sup_A <- num_transactions_A / total_transactions
sup_A
# find the number of invoices that have both products A and B
num_A_and_B <- transactions %>%
filter(stock_code %in% c(22469, 21110)) %>%
group_by(invoice_no) %>%
summarise(num_prod = n_distinct(stock_code)) %>%
filter(num_prod == 2) %>%
summarise(num_A_and_B = n())
# calculate sup(A -> B)
sup_A_and_B <- num_A_and_B / total_transactions
sup_A_and_B
# filter(invoice_no %in% c(536520, 536592, 537144, 537773, 538071, 538349, 538524),
#        stock_code %in% c(22469, 21110))
# conf(A -> B) = sup(A -> B) / sup(A)
conf_A_and_B <- sup_A_and_B / sup_A
conf_A_and_B
num_transactions_B <- transactions %>%
filter(stock_code == 21110 ) %>%
distinct(invoice_no, stock_code) %>%
summarise(prob_B = n())
sup_B <- num_transactions_B / total_transactions
sup_B
lift_A_and_B <- sup_A_and_B / (sup_A * sup_B)
lift_A_and_B
library(arules)
library(arulesViz)
transactions_reformat <- transactions %>%
select(invoice_no, description) %>%
na.omit()
write_csv(transactions_reformat, "transactions_reformat.csv")
apriori_format <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("invoice_no", "description"))
inspect(head(apriori_format))
# get the rules
rules <- apriori(apriori_format, parameter = list(supp = 0.8, conf = 0.8))
options(digits=2)
inspect(rules[1:5])
# get the rules
rules <- apriori(apriori_format, parameter = list(supp = 0.5, conf = 0.8))
# options(digits=2)
# inspect(rules[1:5])
# get the rules
rules <- apriori(apriori_format, parameter = list(supp = 0.5, conf = 0.8))
# options(digits=2)
inspect(rules[1:5])
rules <- apriori(apriori_format, parameter = list(supp = 0.1, conf = 0.8))
rules <- apriori(apriori_format, parameter = list(supp = 0.1, conf = 0.1))
rules <- apriori(apriori_format, parameter = list(supp = 0.1, conf = 0.1))
rules <- apriori(apriori_format, parameter = list(supp = 0.05, conf = 0.1))
sup_A_and_B
rules <- apriori(apriori_format, parameter = list(supp = 0.05, conf = 0.01))
rules
# options(digits=2)
inspect(rules[1:5])
# get the rules
rules <- apriori(apriori_format, parameter = list(supp = 0.05, conf = 0.01))
rules
# options(digits=2)
inspect(rules[1:5])
# get the rules
rules <- apriori(apriori_format, parameter = list(supp = 0.005, conf = 0.01))
rules <- apriori(apriori_format, parameter = list(supp = 0.01, conf = 0.001))
rules
# options(digits=2)
inspect(rules[1:5])
rules
# options(digits=2)
inspect(rules[1:5])
rules %>%
arrange(desc(support))
rules %>%
arrange(desc(support))
# get the rules
rules <- apriori(apriori_format, parameter = list(supp = 0.05, conf = 0.001))
rules %>%
arrange(desc(support))
# get the rules
rules <- apriori(apriori_format, parameter = list(supp = 0.05, conf = 0.001))
rules
rules
rules
null_distribution_sleep <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
library(tidyverse)
library(infer)
msleep
glimpse(msleep)
summary(msleep)
# calculate sample statistic, i.e. mean of total sleep for all animals in sample
sleep_observed_stat <- msleep %>%
summarise(mean_sleep_total = mean(sleep_total))
null_distribution_sleep <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
# create histogram of null_distribution
null_distribution_sleep %>%
visualise() +
shade_p_value(obs_stat = sleep_observed_stat, direction = "both")
p_value <- null_distribution_sleep %>%
get_p_value(obs_stat = sleep_observed_stat, direction = "both")
# filter sample data for only omnivore and herbivore animals
msleep_filtered <- msleep %>%
filter(vore %in% c("omni", "herbi"))
# calculate sample statistic, i.e. mean of total sleep for all animals in sample
vore_observed_stat <- msleep_filtered %>%
specify(response = sleep_total, explanatory = vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
vore_observed_stat
null_distribution_vore <- msleep_filtered %>%
specify(response = sleep_total, explanatory = vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
# create histogram of null_distribution
null_distribution_vore %>%
visualise() +
shade_p_value(obs_stat = vore_observed_stat, direction = "right")
p_value <- null_distribution_vore %>%
get_p_value(obs_stat = vore_observed_stat, direction = "right")
p_value
# create column specifying if animal is domesticated, change NA to FALSE
msleep_dom <- msleep %>%
mutate(is_domesticated = conservation == "domesticated",
is_domesticated = coalesce(is_domesticated, FALSE),
.after = conservation)
# calculate sample statistic, i.e. proportion of domesticated animals
dom_observed_stat <- msleep_dom %>%
specify(response = is_domesticated, success = "TRUE") %>%
calculate(stat = "prop")
dom_observed_stat
null_distribution_dom <- msleep_dom %>%
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
# create histogram of null_distribution
null_distribution_dom %>%
visualise() +
shade_p_value(obs_stat = dom_observed_stat, direction = "right")
p_value <- null_distribution_dom %>%
get_p_value(obs_stat = dom_observed_stat, direction = "right")
p_value
library(janitor)
transactions <- read_csv("data/online_retail_subset.csv") %>%
clean_names()
# filter data for stock code and distinct invoice_no
num_transactions_A <- transactions %>%
filter(stock_code == 22469) %>%
distinct(invoice_no, stock_code) %>%
summarise(prob_A = n())
# calculate number of total distinct invoices
total_transactions <- transactions %>%
distinct(invoice_no) %>%
summarise(n())
sup_A <- num_transactions_A / total_transactions
sup_A
# find the number of invoices that have both products A and B
num_A_and_B <- transactions %>%
filter(stock_code %in% c(22469, 21110)) %>%
group_by(invoice_no) %>%
summarise(num_prod = n_distinct(stock_code)) %>%
filter(num_prod == 2) %>%
summarise(num_A_and_B = n())
# calculate sup(A -> B)
sup_A_and_B <- num_A_and_B / total_transactions
sup_A_and_B
# filter(invoice_no %in% c(536520, 536592, 537144, 537773, 538071, 538349, 538524),
#        stock_code %in% c(22469, 21110))
# conf(A -> B) = sup(A -> B) / sup(A)
conf_A_and_B <- sup_A_and_B / sup_A
conf_A_and_B
num_transactions_B <- transactions %>%
filter(stock_code == 21110 ) %>%
distinct(invoice_no, stock_code) %>%
summarise(prob_B = n())
sup_B <- num_transactions_B / total_transactions
sup_B
lift_A_and_B <- sup_A_and_B / (sup_A * sup_B)
lift_A_and_B
library(arules)
library(arulesViz)
transactions_reformat <- transactions %>%
select(invoice_no, description) %>%
na.omit()
write_csv(transactions_reformat, "transactions_reformat.csv")
apriori_format <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("invoice_no", "description"))
inspect(head(apriori_format))
transactions %>%
distinct(description)
# get the rules
rules <- apriori(apriori_format, parameter = list(supp = 0.02, conf = 0.6,
minlen = 3),
control = list(verbose = F))
# rules <- sort(rules, by="confidence", decreasing=TRUE)
inspect(rules[])
library(arulesViz)
plot(rules, method="graph", engine = "interactive")
