permutations(6,3, repeats.allowed = FALSE)
permutations(6,3, repeats.allowed = TRUE)
nrow(permutations(6,3, repeats.allowed = TRUE))
num_outcomes <- nrow(rolldie(3))
num_outcomes_verify <- nrow(permutations(6,3, repeats.allowed = TRUE))
#first method, use rolldie() function
num_outcomes <- nrow(rolldie(3))
#second method, use permutations() from gtools
num_outcomes_verify <- nrow(permutations(6,3, repeats.allowed = TRUE))
num_outcomes
num_outcomes_verify
four_rolls <- rolldie(4)
four_rolls
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = sum(X1:X4) == 5:7)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = X1 + X2 + X3 +X4 == 5:7)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = X1 + X2 + X3 + X4 == 5:7)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
filter(sum = X1 + X2 + X3 + X4 == 5:7)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
filterX1 + X2 + X3 + X4 == 5:7)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
filter(X1 + X2 + X3 + X4 == 5:7)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = X1 + X2 + X3 + X4)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = X1 + X2 + X3 + X4) %>%
filter(sum == 5:7)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = X1 + X2 + X3 + X4) %>%
filter(sum == 5:7) %>% # 9 outcomes
summarise(prob = n() / nrow(four_rolls))
four_rolls %>%
mutate(sum = X1 + X2 + X3 + X4)
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = X1 + X2 + X3 + X4) %>%
filter(sum == 5:7) %>% # 9 outcomes
summarise(prob = n() / nrow(four_rolls))
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = rowSums(.)) %>%
filter(sum == 5:7) %>% # 9 outcomes
summarise(prob = n() / nrow(four_rolls))
four_rolls %>%
mutate(sum = rowSums(.))
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = rowSums(.)) %>%
filter(sum == 5:7) %>% # 9 outcomes
summarise(prob = n() / nrow(four_rolls))
permutations(5,5)
prob_desc_height <- 1/permutations(5,5)
prob_desc_height
prob_desc_height <- 1/nrow(permutations(5,5))
num_permutations <- nrow(permutations(5,5))
num_permutations
choose(5,5)
choose(5,5)
#this can be verified using an example, we are interested in the order of {5,4,3,2,1} representing descending height order.
permutations(5,5)
#this can be verified using an example, we are interested in the order of {5,4,3,2,1} representing descending height order.
as.tibble(permutations(5,5))
perm %>%
filter(V1 > V2 > V3 > V4 > V5)
num_permutations <- nrow(permutations(5,5))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_height <- 1 / num_permutations
#this can be verified using an example, we are interested in the order of {5,4,3,2,1} representing descending height order.
perm <- as.tibble(permutations(5,5))
perm %>%
filter(V1 == 5,
V2 == 4,
V3 == 3,
V4 == 2,
V5 == 1)
perm %>%
filter(V1 == 5,
V2 == 4,
V3 == 3,
V4 == 2,
V5 == 1) %>%
summarise(prob = n() / nrow(perm))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_height <- 1 / num_permutations
prob_desc_height
perm %>%
filter(V1 == 5,
V2 == 4,
V3 == 3,
V4 == 2,
V5 == 1) %>%
summarise(prob = n() / nrow(perm))
num_permutations <- nrow(permutations(5,5))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_height <- 1 / num_permutations
prob_desc_height
#this can be verified using an example, we are interested in the order of {5,4,3,2,1} representing descending height order.
perm <- as.tibble(permutations(5,5))
prob_desc_height_2 <- perm %>%
filter(V1 == 5,
V2 == 4,
V3 == 3,
V4 == 2,
V5 == 1) %>%
summarise(prob = n() / nrow(perm))
prob_desc_height_2
num_permutations <- nrow(permutations(6, 6))
num_permutations
num_permutations <- nrow(permutations(6, 6))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_num <- 1 / num_permutations
prob_desc_num
num_permutations
num_1_to_6 <- factorial(6)
prob_1_to_6_is_seen <- num_1_to_6 / num_permutations
num_1_to_6
prob_1_to_6_is_seen <- num_1_to_6 / num_permutations
prob_1_to_6_is_seen
num_permutations
num_permutations <- nrow(permutations(6, 6, repeats.allowed = TRUE))
num_permutations
num_permutations
num_1_to_6 <- factorial(6)
prob_1_to_6_is_seen <- num_1_to_6 / num_permutations
prob_1_to_6_is_seen
num_permutations <- nrow(permutations(6, 6, repeats.allowed = TRUE))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_num <- 1 / num_permutations
prob_desc_num
num_permutations
num_1_to_6 <- factorial(6)
prob_1_to_6_is_seen <- num_1_to_6 / num_permutations
prob_1_to_6_is_seen
combinations(6,6, repeats.allowed = TRUE)
nrow(combinations(6,6, repeats.allowed = TRUE))
num_combinations <- nrow(combinations(6,6, repeats.allowed = TRUE))
num_combinations <- nrow(combinations(6,6, repeats.allowed = TRUE))
prob_1_to_6 <- 1 / num_combinations
combinations(6,6, repeats.allowed = TRUE)
prob_1_to_6
prob_desc_num
num_combinations <- nrow(combinations(6,6, repeats.allowed = FALSE))
prob_1_to_6
num_combinations <- nrow(combinations(6,6, repeats.allowed = FALSE))
prob_1_to_6 <- 1 / num_combinations
prob_1_to_6
num_combinations <- nrow(combinations(6,6, repeats.allowed = FALSE))
prob_1_to_6 <- 1 / num_combinations
prob_1_to_6
num_combinations <- nrow(combinations(6,6, repeats.allowed = TRUE))
prob_1_to_6 <- 1 / num_combinations
prob_1_to_6
prob_black
prob_black <- 26/52
prob_black
prob_spades <- 13/52
cards()
prob_black <- 26/52
prob_spades <- 13/52
cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
cards %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- cards %>%
filter(colour == "black" & suit == "Spade")
prob_black_and_spades <- cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow(cards))
prob_black_and_spades <- cards %>%
prob_black_and_spades
prob_black <- 26/52
prob_spades <- 13/52
cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
playing_cards <- card %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
source("prob.R")
playing_cards <- card %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow(cards))
prob_black_and_spades
playing_cards
playing_cards %>%
filter(colour == "black" & suit == "Spade")
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow(suit))
prob_black_and_spades
playing_cards %>%
filter(colour == "black" & suit == "Spade")
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow(colour == "black"))
prob_black_and_spades
playing_cards %>%
filter(colour == "black" & suit == "Spade")
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow(playing_cards$suit == "black"))
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades
prob_black_and_spades
playing_cards %>%
filter(colour == "black" & suit == "Spade")
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow())
playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow())
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow(.))
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n())
prob_black_and_spades
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / sum(suit = "black"))
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / sum(suit == "black"))
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades
suit == "black"
playing_cards %>%
filter(colour == "black" & suit == "Spade")
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / sum(colour == "black"))
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / sum(playing_cards$colour == "black"))
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades
playing_cards$colour == "black"
sum(playing_cards$colour == "black")
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / sum(playing_cards$colour == "black"))
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / sum(playing_cards$colour == "black"))
prob_black_and_spades
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / sum(playing_cards$colour == "black"))
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
library(tidyverse)
library(gtools)
titanic <- read_csv("data/titanic.csv")
titanic <- titanic %>%
mutate(is_crew = if_else(str_detect(class, "[0-9]"), FALSE, TRUE))
prob_crew <- titanic %>%
filter(is_crew) %>%
summarise(prob = n()/nrow(titanic))
prob_passenger <- titanic %>%
filter(!is_crew) %>%
summarise(prob = n()/nrow(titanic))
prob_survived_and_crew <- titanic %>%
filter(is_crew & survived == "yes") %>%
summarise(prob = n()/nrow(titanic))
prob_survived_and_passenger <- titanic %>%
filter(!is_crew & survived == "yes") %>%
summarise(prob = n()/nrow(titanic))
frac_crew_survived <- prob_survived_and_crew / prob_crew
frac_passenger_survived <- prob_survived_and_passenger / prob_passenger
frac_crew_survived # 23.7%
frac_passenger_survived # 38.0
source("prob.R")
one_roll <- rolldie(1)
prob_lt_5 <- one_roll %>%
filter(X1 < 5) %>%
summarise(prob = n() / nrow(one_roll))
prob_lt_5
#first method, use rolldie() function
num_outcomes <- nrow(rolldie(3))
#second method, use permutations() from gtools
num_outcomes_verify <- nrow(permutations(6,3, repeats.allowed = TRUE))
num_outcomes
num_outcomes_verify
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = rowSums(.)) %>%
filter(sum == 5:7) %>% # 9 outcomes
summarise(prob = n() / nrow(four_rolls))
num_permutations <- nrow(permutations(5,5))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_height <- 1 / num_permutations
prob_desc_height
#this can be verified using an example, we are interested in the order of {5,4,3,2,1} representing descending height order.
perm <- as.tibble(permutations(5,5))
prob_desc_height_2 <- perm %>%
filter(V1 == 5,
V2 == 4,
V3 == 3,
V4 == 2,
V5 == 1) %>%
summarise(prob = n() / nrow(perm))
prob_desc_height_2
num_permutations <- nrow(permutations(6, 6, repeats.allowed = TRUE))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_num <- 1 / num_permutations
prob_desc_num
num_combinations <- nrow(combinations(6,6, repeats.allowed = TRUE))
prob_1_to_6 <- 1 / num_combinations
prob_1_to_6
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / sum(playing_cards$colour == "black"))
prob_black_and_spades #probability is 50% that the black card is spades
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black
prob_spades <- playing_cards %>%
filter(suit == "Spade") %>%
summarise(prob = n() / sum(playing_cards))
prob_spades <- playing_cards %>%
filter(suit == "Spade") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades <- prob_spades / prob_black
prob_black_and_spades
# set up the card draw
card_draw <- cards(jokers = FALSE)
# add in the conditions to show which are black cards, and which arent
card_draw <- card_draw %>%
mutate(black_card = (suit == "Club" | suit == "Spade"))
# now we can filter the rows we want, and figure out the probability of getting a black spade
spades_and_black_card <- card_draw %>%
filter(black_card == TRUE & suit == "Spade")
prob_spades_and_black <- nrow(spades_and_black_card) / nrow(card_draw)
# we can figure out the probability of getting a black card now
black_card <- card_draw %>%
filter(black_card == TRUE)
prob_black <- nrow(black_card) / nrow(card_draw)
# now we can figure out the conditional probability
prob_spades_given_black <- prob_spades_and_black / prob_black
prob_spades_given_black
spades_and_black_card
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades
prob_black
prob_black_and_spades <- prob_black_and_spades / prob_black
playing_cards <- cards() %>%
mutate(colour = if_else(suit %in% c("Spade", "Club"), "black", "red"))
prob_black_and_spades <- playing_cards %>%
filter(colour == "black" & suit == "Spade") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black <- playing_cards %>%
filter(colour == "black") %>%
summarise(prob = n() / nrow(playing_cards))
prob_black_and_spades <- prob_black_and_spades / prob_black
prob_black_and_spades #probability is 50% that the black card is spades
num_permutations
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = rowSums(.)) %>%
filter(sum %in% c(5,6,7)) %>% # 9 outcomes
summarise(prob = n() / nrow(four_rolls))
four_rolls %>%
mutate(sum = rowSums(.)) %>%
filter(sum %in% c(5,6,7))
# all possible permutations of 4 die rolls
four_rolls <- rolldie(4)
# filter on values of 4 rolls equals 5, 6 or 7.
four_rolls %>%
mutate(sum = rowSums(.)) %>%
filter(sum %in% c(5,6,7)) %>% # 34 outcomes
summarise(prob = n() / nrow(four_rolls))
num_permutations <- nrow(permutations(5,5))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_height <- 1 / num_permutations
prob_desc_height
#this can be verified using an example, we are interested in the order of {5,4,3,2,1} representing descending height order.
perm <- as.tibble(permutations(5,5))
prob_desc_height_2 <- perm %>%
filter(V1 == 5,
V2 == 4,
V3 == 3,
V4 == 2,
V5 == 1) %>%
summarise(prob = n() / nrow(perm))
prob_desc_height_2
num_permutations <- nrow(permutations(6, 6, repeats.allowed = TRUE))
#only one correct order therefore number of correct solutions is 1, probability is 1 over the number of permutations
prob_desc_num <- 1 / num_permutations
prob_desc_num
num_combinations <- nrow(combinations(6,6, repeats.allowed = TRUE))
num_combinations
prob_1_to_6
prob
# row must contain 6, 5,..., 1, but can occur in any order
contains_654321 <- six_rolls %>%
filter(isin(., c(6, 5, 4, 3, 2, 1), ordered = FALSE))
num_combinations
num_combinations <- nrow(combinations(6,6, repeats.allowed = FALSE))
num_combinations <- nrow(combinations(6,6, repeats.allowed = FALSE))
num_combinations
6!
factorial(6)
factorial(6) / 6^6
prob_1_to_6
permutations(6,6, repeats.allowed = FALSE)
nrow(permutations(6,6, repeats.allowed = FALSE))
prob_1_to_6 <- num_123456 / num_permutations
num_123456 <- nrow(permutations(6,6, repeats.allowed = FALSE))
prob_1_to_6 <- num_123456 / num_permutations
prob_1_to_6
combinations(6,6, repeats.allowed = TRUE)
nrow(combinations(6,6, repeats.allowed = TRUE))
nrow(combinations(6,6, repeats.allowed = TRUE))
nrow(combinations(6,6, repeats.allowed = FALSE))
nrow(combinations(6,6, repeats.allowed = TRUE))
num_123456 <- nrow(permutations(6,6, repeats.allowed = FALSE))
prob_1_to_6 <- num_123456 / num_permutations
prob_1_to_6
choose(6,6)
choose(6,2)
choose(6,1)
choose(1, 6)
?choose
